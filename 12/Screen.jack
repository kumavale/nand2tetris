// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;    // Screen pointer
    static Array pow_of_2;  // Powers of 2
    static boolean color;   // if true then black else white

    /** Initializes the Screen. */
    function void init() {
        var int i, val;
        let screen = 16384;
        let color = true;

        let i = 0;
        let val = 1;
        let pow_of_2 = Array.new(16);
        while (i<16) {
            let pow_of_2[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {  // 512*256/16
            let screen[i] = 0;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, mask;
        let address = (y*32) + (x/16);
        let bit = x - ((x/16)*16);  // bit = x % 16
        let mask = pow_of_2[bit];

        if (color) {
            let screen[address] = screen[address] | mask;   // Black
        } else {
            let screen[address] = screen[address] & ~mask;  // White
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    /** Bresenham's line algorithm */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var boolean steep;
        var int dx, dy, error, ystep, x, y, tmp;
        let steep = Math.abs(y2 - y1) > Math.abs(x2 - x1);

        if (steep) {
            // swap(x1, y1);
            let tmp = x1;
            let x1 = y1;
            let y1 = tmp;
            // swap(x2, y2);
            let tmp = x2;
            let x2 = y2;
            let y2 = tmp;
        }
        if (x1 > x2) {
            // swap(x1, x2);
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            // swap(y1, y2);
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        let error = dx / 2;
        let y = y1;

        if (y1 < y2) {
            let ystep = 1;
        } else {
            let ystep = -1;
        }

        let x = x1;
        while (x < x2) {
            if (steep) {
                do Screen.drawPixel(y, x);
            } else {
                do Screen.drawPixel(x, y);
            }
            let error = error - dy;
            if (error < 0) {
                let y = y + ystep;
                let error = error + dx;
            }
            let x = x + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        let dy = y1;

        while (dy < y2) {
            do Screen.drawLine(x1, dy, x2, dy);
            let dy = dy + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r_squared;
        let dy = -r;
        let r_squared = r * r;

        while (~(dy > r)) {
            let dx = Math.sqrt(r_squared - (dy * dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }

        return;
    }
}
