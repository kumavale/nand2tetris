
function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label whilebegin0
push local 0
push constant 16
lt
not
if-goto whileend0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto whilebegin0
label whileend0
push constant 0
return

function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto else1
push argument 0
neg
return
goto ifend1
label else1
push argument 0
return
label ifend1

function Math.multiply 3
push constant 0
pop local 0
push constant 0
pop local 1
push argument 0
pop local 2
label whilebegin2
push local 0
push constant 16
lt
not
if-goto whileend2
push local 0
push static 0
add
pop pointer 1
push that 0
push argument 1
and
push constant 0
eq
not
not
if-goto else3
push local 1
push local 2
add
pop local 1
goto ifend3
label else3
label ifend3
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto whilebegin2
label whileend2
push local 1
return

function Math.divide 3
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
pop local 2
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
not
if-goto else4
push constant 0
return
goto ifend4
label else4
label ifend4
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
push argument 1
call Math.multiply 2
call Math.multiply 2
sub
push argument 1
lt
not
if-goto else5
push local 0
push local 0
add
pop local 1
goto ifend5
label else5
push local 0
push local 0
push constant 1
add
add
pop local 1
label ifend5
push local 2
not
if-goto else6
push local 1
return
goto ifend6
label else6
push local 1
neg
return
label ifend6

function Math.sqrt 4
push constant 0
pop local 0
push constant 10
pop local 1
label whilebegin7
push local 1
push constant 0
lt
not
not
if-goto whileend7
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto else8
push local 2
pop local 0
goto ifend8
label else8
label ifend8
push local 1
push constant 1
sub
pop local 1
goto whilebegin7
label whileend7
push local 0
return

function Math.max 0
push argument 0
push argument 1
lt
not
if-goto else9
push argument 1
return
goto ifend9
label else9
push argument 0
return
label ifend9

function Math.min 0
push argument 0
push argument 1
lt
not
if-goto else10
push argument 0
return
goto ifend10
label else10
push argument 1
return
label ifend10

function Math.pow 2
push argument 0
pop local 1
push argument 1
push constant 0
eq
not
if-goto else11
push constant 1
return
goto ifend11
label else11
label ifend11
label whilebegin12
push constant 1
push argument 1
lt
not
if-goto whileend12
push local 1
push argument 0
call Math.multiply 2
pop local 1
push argument 1
push constant 1
sub
pop argument 1
goto whilebegin12
label whileend12
push local 1
return
